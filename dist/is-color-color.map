{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/color.js","webpack:///webpack/bootstrap af08a424c0ded423103c","webpack:///./src/color.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","Color","opts","red","green","blue","toString","hex","substr","Array","isArray","arguments","r","g","b","parseInt","value","colorMap","getColorMap","matchedColors","getMatchedColors","that","distances","map","name","distance","reference","sort","colorName","is","push","opacity","values","toArray","join","hue","saturation","lightness","rgb","xyz1","rgb_to_xyz","xyz2","apply","lab1","xyz_to_lab","lab2","difference","de_1994","x","y","z","_red","_green","_blue","Math","pow","l","_x","_y","_z","c1","sqrt","c2","dc","dl","da","db","dh","first","second","third","css","divider","undefined","brightness","brown","mostlyRed","variance","ret","maxHue","pink","_matchesCriterion","abs","gray","minSaturation","minHue","orange","minBrightness","yellow","indigo","maxBrightness","violet","white","maxSaturation","black","compare","isGray","isRed","criterion","maxValue","minValue","h","s","max","min","v","d","_hue","parseFloat","toFixed","_saturation","_lightness","_brightness","_value","get","initializeHSLV","window"],"mappings":"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","file":"./dist/color.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t/**\n\t * Color Manipulation class\n\t * @author Kaanon MacFarlane <kaanonm@gmail.com>\n\t * @class Color\n\t * @description Find out information about a particular color\n\t * @example var c = new Color([100,200,150]); \n\t *\n\t *\n\t * TODO: compare color objects\n\t * TODO: support hex in constructor\n\t */\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Color = (function () {\n\t\n\t    /**\n\t     * Create the object\n\t     * @param  {varies} opts description on color\n\t     * var c = new Color(255,100,100);\n\t     * var c = new Color([255,100,100]);\n\t     * var c = new Color('#FF9922');\n\t     * var c = new Color({r: 255, g: 100, b: 100})\n\t     * var c = new Color({red: 255, green: 100, blue: 100})\n\t     */\n\t\n\t    function Color(opts) {\n\t        _classCallCheck(this, Color);\n\t\n\t        var red, green, blue;\n\t\n\t        // If passing in a hex string\n\t        if (toString.call(opts) === \"[object String]\" && opts.length >= 6) {\n\t            var hex = opts.substr(0, 1) === '#' ? opts.substr(1) : opts;\n\t            red = \"0x\" + hex.substr(0, 2);\n\t            green = \"0x\" + hex.substr(2, 2);\n\t            blue = \"0x\" + hex.substr(4, 2);\n\t        }\n\t        // If passing in an array:\n\t        else if (Array.isArray(opts) && opts.length === 3) {\n\t                red = opts[0];\n\t                green = opts[1];\n\t                blue = opts[2];\n\t            }\n\t            // if passing in\n\t            else if (arguments.length === 3) {\n\t                    red = arguments[0];\n\t                    green = arguments[1];\n\t                    blue = arguments[2];\n\t                } else if (opts.r) {\n\t                    red = opts.r;\n\t                    green = opts.g;\n\t                    blue = opts.b;\n\t                } else if (opts.red) {\n\t                    red = opts.red;\n\t                    green = opts.green;\n\t                    blue = opts.blue;\n\t                } else {\n\t                    throw new TypeError('Invalid Initialization Options');\n\t                }\n\t\n\t        this.red = parseInt(red);\n\t        this.green = parseInt(green);\n\t        this.blue = parseInt(blue);\n\t\n\t        // Make sure we are within the known color space\n\t        if (this.red > 255 || this.green > 255 || this.blue > 255) {\n\t            throw new TypeError('Invalid Colorspace');\n\t        }\n\t    }\n\t\n\t    _createClass(Color, [{\n\t        key: 'name',\n\t        value: function name() {\n\t            var colorMap = this.getColorMap(),\n\t                matchedColors = this.getMatchedColors();\n\t\n\t            if (matchedColors.length === 1) {\n\t                return matchedColors[0];\n\t            } else if (matchedColors.length > 1) {\n\t                // If more than one color matches, sort by the distance from the reference\n\t                // Return the color name that is closest to the reference color\n\t                var that = this;\n\t                var distances = matchedColors.map(function (name) {\n\t                    return {\n\t                        name: name,\n\t                        distance: that.distance(colorMap[name].reference)\n\t                    };\n\t                });\n\t                distances.sort(function (a, b) {\n\t                    if (a.distance > b.distance) {\n\t                        return 1;\n\t                    }\n\t                    if (a.distance < b.distance) {\n\t                        return -1;\n\t                    }\n\t                    // a must be equal to b\n\t                    return 0;\n\t                });\n\t                return distances[0].name;\n\t            }\n\t            return null;\n\t        }\n\t    }, {\n\t        key: 'names',\n\t        value: function names() {\n\t            return this.getMatchedColors();\n\t        }\n\t    }, {\n\t        key: 'getMatchedColors',\n\t        value: function getMatchedColors() {\n\t            var colorMap = this.getColorMap(),\n\t                matchedColors = [];\n\t            for (var colorName in colorMap) {\n\t                if (this.is(colorName)) {\n\t                    matchedColors.push(colorName);\n\t                }\n\t            }\n\t            return matchedColors;\n\t        }\n\t        /**\n\t         * Returns the value to be used in a css declaration\n\t         * @method css\n\t         * @param  {float} opacity From 0 - 1\n\t         * @return {string}\n\t         */\n\t\n\t    }, {\n\t        key: 'css',\n\t        value: function css(opacity) {\n\t            var values = this.toArray(),\n\t                name = 'rgb(';\n\t\n\t            if (opacity) {\n\t                name = 'rgba(';\n\t                values.push(opacity);\n\t            }\n\t            return name + values.join(', ') + ')';\n\t        }\n\t\n\t        /**\n\t         * Returns the value to be used in a css declaration\n\t         * @method cssHSL\n\t         * @return {string}\n\t         */\n\t\n\t    }, {\n\t        key: 'cssHSL',\n\t        value: function cssHSL() {\n\t            var name = 'hsl(',\n\t                values = [this.hue, this.saturation, this.lightness];\n\t            return name + values.join(', ') + ')';\n\t        }\n\t\n\t        /**\n\t         * Returns the value to be used in a css declaration\n\t         * @method cssHSV\n\t         * @return {string}\n\t         */\n\t\n\t    }, {\n\t        key: 'cssHSV',\n\t        value: function cssHSV() {\n\t            var name = 'hsv(',\n\t                values = [this.hue, this.saturation, this.value];\n\t            return name + values.join(', ') + ')';\n\t        }\n\t\n\t        /**\n\t         * Distance between this color and another color\n\t         * @method distance\n\t         * @param  {array} rgb [red, green, blue]\n\t         * @return {number}\n\t         */\n\t\n\t    }, {\n\t        key: 'distance',\n\t        value: function distance(rgb) {\n\t            var xyz1 = this.rgb_to_xyz(this.red, this.green, this.blue),\n\t                xyz2 = this.rgb_to_xyz.apply(this, rgb),\n\t                lab1 = this.xyz_to_lab.apply(this, xyz1),\n\t                lab2 = this.xyz_to_lab.apply(this, xyz2),\n\t                difference = this.de_1994(lab1, lab2);\n\t            return difference;\n\t        }\n\t\n\t        /**\n\t         * http://www.emanueleferonato.com/2009/08/28/color-differences-algorithm/\n\t         * http://www.emanueleferonato.com/2009/09/08/color-difference-algorithm-part-2/\n\t         * @method rgb_to_xyz\n\t         * @param  {[type]}   red   [description]\n\t         * @param  {[type]}   green [description]\n\t         * @param  {[type]}   blue  [description]\n\t         * @return {[type]}\n\t         */\n\t\n\t    }, {\n\t        key: 'rgb_to_xyz',\n\t        value: function rgb_to_xyz(r, g, b) {\n\t            var _red = r / 255,\n\t                _green = g / 255,\n\t                _blue = b / 255,\n\t                x,\n\t                y,\n\t                z;\n\t\n\t            if (_red > 0.04045) {\n\t                _red = (_red + 0.055) / 1.055;\n\t                _red = Math.pow(_red, 2.4);\n\t            } else {\n\t                _red = _red / 12.92;\n\t            }\n\t            if (_green > 0.04045) {\n\t                _green = (_green + 0.055) / 1.055;\n\t                _green = Math.pow(_green, 2.4);\n\t            } else {\n\t                _green = _green / 12.92;\n\t            }\n\t            if (_blue > 0.04045) {\n\t                _blue = (_blue + 0.055) / 1.055;\n\t                _blue = Math.pow(_blue, 2.4);\n\t            } else {\n\t                _blue = _blue / 12.92;\n\t            }\n\t            _red *= 100;\n\t            _green *= 100;\n\t            _blue *= 100;\n\t            x = _red * 0.4124 + _green * 0.3576 + _blue * 0.1805;\n\t            y = _red * 0.2126 + _green * 0.7152 + _blue * 0.0722;\n\t            z = _red * 0.0193 + _green * 0.1192 + _blue * 0.9505;\n\t            return [x, y, z];\n\t        }\n\t    }, {\n\t        key: 'xyz_to_lab',\n\t        value: function xyz_to_lab(x, y, z) {\n\t            var _x = x / 95.047,\n\t                _y = y / 100,\n\t                _z = z / 108.883,\n\t                l,\n\t                a,\n\t                b;\n\t\n\t            if (_x > 0.008856) {\n\t                _x = Math.pow(_x, 1 / 3);\n\t            } else {\n\t                _x = 7.787 * _x + 16 / 116;\n\t            }\n\t            if (_y > 0.008856) {\n\t                _y = Math.pow(_y, 1 / 3);\n\t            } else {\n\t                _y = 7.787 * _y + 16 / 116;\n\t            }\n\t            if (_z > 0.008856) {\n\t                _z = Math.pow(_z, 1 / 3);\n\t            } else {\n\t                _z = 7.787 * _z + 16 / 116;\n\t            }\n\t            l = 116 * _y - 16;\n\t            a = 500 * (_x - _y);\n\t            b = 200 * (_y - _z);\n\t            return [l, a, b];\n\t        }\n\t    }, {\n\t        key: 'de_1994',\n\t        value: function de_1994(lab1, lab2) {\n\t            var c1 = Math.sqrt(lab1[1] * lab1[1] + lab1[2] * lab1[2]),\n\t                c2 = Math.sqrt(lab2[1] * lab2[1] + lab2[2] * lab2[2]),\n\t                dc = c1 - c2,\n\t                dl = lab1[0] - lab2[0],\n\t                da = lab1[1] - lab2[1],\n\t                db = lab1[2] - lab2[2],\n\t                dh = Math.sqrt(da * da + db * db - dc * dc),\n\t                first = dl,\n\t                second = dc / (1 + 0.045 * c1),\n\t                third = dh / (1 + 0.015 * c1);\n\t            return Math.sqrt(first * first + second * second + third * third);\n\t        }\n\t    }, {\n\t        key: 'toString',\n\t        value: function toString() {\n\t            return this.css();\n\t        }\n\t    }, {\n\t        key: 'isLight',\n\t        value: function isLight() {\n\t            var divider = arguments.length <= 0 || arguments[0] === undefined ? 200 : arguments[0];\n\t\n\t            return this.brightness >= divider;\n\t        }\n\t    }, {\n\t        key: 'isDark',\n\t        value: function isDark() {\n\t            var divider = arguments.length <= 0 || arguments[0] === undefined ? 50 : arguments[0];\n\t\n\t            return this.brightness <= divider;\n\t        }\n\t    }, {\n\t        key: 'isSkinTone',\n\t        value: function isSkinTone() {\n\t            var brown = arguments.length <= 0 || arguments[0] === undefined ? [139, 69, 19] : arguments[0];\n\t\n\t            if (this.saturation < 60 && this.mostlyRed() && this.distance(brown) < 35) {\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'isRed',\n\t        value: function isRed(variance) {\n\t            var colorMap = this.getColorMap(),\n\t                ret = true;\n\t\n\t            ret = this.hue <= colorMap.red.maxHue || this.hue > colorMap.pink.maxHue;\n\t            delete colorMap.red.maxHue;\n\t            return ret && this._matchesCriterion(colorMap.red);\n\t        }\n\t    }, {\n\t        key: 'isGray',\n\t        value: function isGray() {\n\t            var variance = arguments.length <= 0 || arguments[0] === undefined ? 30 : arguments[0];\n\t\n\t            var colorMap = this.getColorMap(),\n\t                ret = true;\n\t\n\t            ret = Math.abs(this.red - this.blue) < variance && Math.abs(this.red - this.green) < variance && Math.abs(this.blue - this.green) < variance;\n\t            return ret && this._matchesCriterion(colorMap.gray);\n\t        }\n\t    }, {\n\t        key: 'getColorMap',\n\t        value: function getColorMap() {\n\t            return {\n\t\n\t                red: {\n\t                    reference: [255, 0, 0],\n\t                    maxHue: 10,\n\t                    // minBrightness: 30,\n\t                    minSaturation: 10\n\t                },\n\t                brown: {\n\t                    reference: [112, 42, 11],\n\t                    minHue: 5,\n\t                    maxHue: 50\n\t                },\n\t                // maxSaturation: 84,\n\t                // minBrightness: 18\n\t                orange: {\n\t                    reference: [253, 82, 13],\n\t                    minHue: 10,\n\t                    maxHue: 39,\n\t                    minSaturation: 71,\n\t                    minBrightness: 40\n\t                },\n\t                yellow: {\n\t                    reference: [255, 255, 0],\n\t                    minHue: 40,\n\t                    maxHue: 68\n\t                },\n\t                // minSaturation: 50,\n\t                // minBrightness: 45\n\t                green: {\n\t                    reference: [0, 255, 0],\n\t                    minHue: 58.5,\n\t                    maxHue: 170,\n\t                    // minSaturation: 10,\n\t                    minBrightness: 7\n\t                },\n\t                blue: {\n\t                    reference: [0, 0, 255],\n\t                    minHue: 167,\n\t                    maxHue: 250\n\t                },\n\t                indigo: {\n\t                    reference: [0, 0, 255],\n\t                    minHue: 220,\n\t                    maxHue: 250,\n\t                    minSaturation: 60,\n\t                    maxBrightness: 35\n\t                },\n\t                violet: {\n\t                    reference: [164, 100, 223],\n\t                    minHue: 220,\n\t                    maxHue: 323,\n\t                    minSaturation: 13\n\t                },\n\t\n\t                // minBrightness: 10\n\t                pink: {\n\t                    reference: [250, 50, 150],\n\t                    minHue: 295,\n\t                    maxHue: 334\n\t                },\n\t                // minSaturation: 80\n\t                white: {\n\t                    reference: [255, 255, 255],\n\t                    maxSaturation: 5,\n\t                    minBrightness: 95\n\t                },\n\t                black: {\n\t                    reference: [0, 0, 0],\n\t                    maxSaturation: 5,\n\t                    maxBrightness: 5\n\t                },\n\t                gray: {\n\t                    reference: [204, 204, 204],\n\t                    minBrightness: 10,\n\t                    maxBrightness: 98\n\t                }\n\t            };\n\t        }\n\t    }, {\n\t        key: 'is',\n\t        value: function is(compare) {\n\t            var colorMap = this.getColorMap();\n\t            if (compare === 'gray') {\n\t                return this.isGray();\n\t            }\n\t            if (compare === 'red') {\n\t                return this.isRed();\n\t            }\n\t            if (colorMap[compare]) {\n\t                var criterion = colorMap[compare];\n\t                return this._matchesCriterion(criterion);\n\t            }\n\t            // TODO: make this work\n\t            // else if (typeof compare === 'Color'){\n\t            //     return this.distance(compare) < variance;  \n\t            // }\n\t            return false;\n\t        }\n\t    }, {\n\t        key: '_matchesCriterion',\n\t        value: function _matchesCriterion(criterion) {\n\t            var ret = true;\n\t\n\t            if (criterion.minHue) {\n\t                ret = ret && this.hue >= criterion.minHue;\n\t            }\n\t            if (criterion.maxHue) {\n\t                ret = ret && this.hue <= criterion.maxHue;\n\t            }\n\t            if (criterion.maxValue) {\n\t                ret = ret && this.value < criterion.maxValue;\n\t            }\n\t            if (criterion.minValue) {\n\t                ret = ret && this.value >= criterion.minValue;\n\t            }\n\t            if (criterion.maxBrightness) {\n\t                ret = ret && this.brightness <= criterion.maxBrightness;\n\t            }\n\t            if (criterion.minBrightness) {\n\t                ret = ret && this.brightness >= criterion.minBrightness;\n\t            }\n\t            if (criterion.maxSaturation) {\n\t                ret = ret && this.saturation <= criterion.maxSaturation;\n\t            }\n\t            if (criterion.minSaturation) {\n\t                ret = ret && this.saturation >= criterion.minSaturation;\n\t            }\n\t            return ret;\n\t        }\n\t\n\t        //Reference: http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n\t\n\t    }, {\n\t        key: 'initializeHSLV',\n\t        value: function initializeHSLV() {\n\t            var r = this.red / 255,\n\t                g = this.green / 255,\n\t                b = this.blue / 255;\n\t\n\t            var max = Math.max(r, g, b),\n\t                min = Math.min(r, g, b);\n\t            var h,\n\t                s,\n\t                l = (max + min) / 2;\n\t            var v = max;\n\t\n\t            if (max == min) {\n\t                h = s = 0; // achromatic\n\t            } else {\n\t                    var d = max - min;\n\t                    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t                    switch (max) {\n\t                        case r:\n\t                            h = (g - b) / d + (g < b ? 6 : 0);break;\n\t                        case g:\n\t                            h = (b - r) / d + 2;break;\n\t                        case b:\n\t                            h = (r - g) / d + 4;break;\n\t                    }\n\t                    h /= 6;\n\t                    h *= 3.6;\n\t                }\n\t            this._hue = parseFloat((h * 100).toFixed(2));\n\t            this._saturation = parseFloat((s * 100).toFixed(2));\n\t            this._lightness = parseFloat((l * 100).toFixed(2));\n\t            this._brightness = parseFloat((this.red * 299 + this.green * 587 + this.blue * 114) / 1000);\n\t            this._value = parseFloat(v);\n\t        }\n\t    }, {\n\t        key: 'toJSON',\n\t        value: function toJSON() {\n\t            return { red: this.red, green: this.green, blue: this.blue };\n\t        }\n\t    }, {\n\t        key: 'toArray',\n\t        value: function toArray() {\n\t            return [this.red, this.green, this.blue];\n\t        }\n\t    }, {\n\t        key: 'toString',\n\t        value: function toString() {\n\t            return '[' + [this.red, this.green, this.blue].join(', ') + ']';\n\t        }\n\t    }, {\n\t        key: 'hue',\n\t        get: function get() {\n\t            if (!this._hue) {\n\t                this.initializeHSLV();\n\t            }\n\t            return this._hue;\n\t        }\n\t    }, {\n\t        key: 'saturation',\n\t        get: function get() {\n\t            if (!this._saturation) {\n\t                this.initializeHSLV();\n\t            }\n\t            return this._saturation;\n\t        }\n\t    }, {\n\t        key: 'lightness',\n\t        get: function get() {\n\t            if (!this._lightness) {\n\t                this.initializeHSLV();\n\t            }\n\t            return this._lightness;\n\t        }\n\t    }, {\n\t        key: 'brightness',\n\t        get: function get() {\n\t            return this.lightness;\n\t        }\n\t    }, {\n\t        key: 'value',\n\t        get: function get() {\n\t            if (!this._value) {\n\t                this.initializeHSLV();\n\t            }\n\t            return this._value;\n\t        }\n\t    }]);\n\t\n\t    return Color;\n\t})();\n\t\n\t;\n\tmodule.exports = Color;\n\twindow.Color = Color;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/color.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap af08a424c0ded423103c\n **/","'use strict';\n/**\n * Color Manipulation class\n * @author Kaanon MacFarlane <kaanonm@gmail.com>\n * @class Color\n * @description Find out information about a particular color\n * @example var c = new Color([100,200,150]); \n *\n *\n * TODO: compare color objects\n * TODO: support hex in constructor\n */\nclass Color {\n\n    /**\n     * Create the object\n     * @param  {varies} opts description on color\n     * var c = new Color(255,100,100);\n     * var c = new Color([255,100,100]);\n     * var c = new Color('#FF9922');\n     * var c = new Color({r: 255, g: 100, b: 100})\n     * var c = new Color({red: 255, green: 100, blue: 100})\n     */\n    constructor(opts) {\n        var red, green, blue;\n\n        // If passing in a hex string\n        if(toString.call(opts) === \"[object String]\" && opts.length >= 6){\n            var hex =  opts.substr(0,1) === '#' ? opts.substr(1) : opts;\n            red   = \"0x\" + hex.substr(0,2);\n            green = \"0x\" + hex.substr(2,2);\n            blue  = \"0x\" + hex.substr(4,2);\n        }\n        // If passing in an array: \n        else if(Array.isArray(opts) && opts.length === 3){\n            red    = opts[0];\n            green  = opts[1];\n            blue   = opts[2];\n        }\n        // if passing in \n        else if (arguments.length === 3){\n            red    = arguments[0];\n            green  = arguments[1];\n            blue   = arguments[2];\n        }\n        else if (opts.r){\n            red   = opts.r;\n            green = opts.g;\n            blue  = opts.b;\n        }\n        else if (opts.red){\n            red   = opts.red;\n            green = opts.green;\n            blue  = opts.blue;\n        }\n        else {\n            throw new TypeError('Invalid Initialization Options');\n        }\n\n        this.red = parseInt(red);\n        this.green = parseInt(green);\n        this.blue = parseInt(blue);\n\n        // Make sure we are within the known color space\n        if(this.red > 255 || this.green > 255 || this.blue > 255){\n            throw new TypeError('Invalid Colorspace');   \n        }\n    }\n\n    get hue(){\n        if(!this._hue){\n            this.initializeHSLV();\n        }\n        return this._hue;\n    }\n\n    get saturation(){\n        if(!this._saturation){\n            this.initializeHSLV();\n        }\n        return this._saturation;\n    }\n\n    get lightness(){\n        if(!this._lightness){\n            this.initializeHSLV();\n        }\n        return this._lightness;\n    }\n\n    get brightness(){\n        return this.lightness;\n    }\n\n    get value(){\n        if(!this._value){\n            this.initializeHSLV();\n        }\n        return this._value;\n    }\n\n    name(){\n        var colorMap = this.getColorMap(),\n            matchedColors = this.getMatchedColors();\n        \n        if(matchedColors.length === 1){\n            return matchedColors[0];\n        }\n        else if(matchedColors.length > 1){\n            // If more than one color matches, sort by the distance from the reference\n            // Return the color name that is closest to the reference color\n            var that = this;\n            var distances = matchedColors.map(function(name){\n                return {\n                    name: name,\n                    distance: that.distance(colorMap[name].reference)\n                }\n            });\n            distances.sort(function(a,b){\n                if (a.distance > b.distance) {\n                    return 1;\n                }\n                if (a.distance < b.distance) {\n                    return -1;\n                }\n                // a must be equal to b\n                return 0;\n            });\n            return distances[0].name;\n        }\n        return null;\n    }\n    names(){\n        return this.getMatchedColors();\n    }\n\n    getMatchedColors(){\n        var colorMap = this.getColorMap(),\n            matchedColors = [];\n        for(var colorName in colorMap){\n            if( this.is(colorName)){\n                matchedColors.push(colorName);\n            }\n        }\n        return matchedColors;\n    }\n    /**\n     * Returns the value to be used in a css declaration\n     * @method css\n     * @param  {float} opacity From 0 - 1\n     * @return {string}\n     */\n    css(opacity){\n        var values =  this.toArray(),\n            name = 'rgb(';\n\n        if(opacity){\n            name = 'rgba(';\n            values.push(opacity);\n        } \n        return name + values.join(', ') + ')';\n    }\n\n    /**\n     * Returns the value to be used in a css declaration\n     * @method cssHSL\n     * @return {string}\n     */\n    cssHSL(){\n        var name = 'hsl(',\n            values = [this.hue, this.saturation, this.lightness];\n        return name + values.join(', ') + ')';\n    }\n\n    /**\n     * Returns the value to be used in a css declaration\n     * @method cssHSV\n     * @return {string}\n     */\n    cssHSV(){\n        var name = 'hsv(',\n            values = [this.hue, this.saturation, this.value];\n        return name + values.join(', ') + ')';\n    }\n\n    /**\n     * Distance between this color and another color\n     * @method distance\n     * @param  {array} rgb [red, green, blue]\n     * @return {number}\n     */\n    distance(rgb){\n        var xyz1 = this.rgb_to_xyz(this.red, this.green, this.blue),\n            xyz2 = this.rgb_to_xyz.apply(this,rgb),\n            lab1 = this.xyz_to_lab.apply(this, xyz1),\n            lab2 = this.xyz_to_lab.apply(this, xyz2),\n            difference = this.de_1994(lab1, lab2);\n        return difference;\n    }\n\n    /**\n     * http://www.emanueleferonato.com/2009/08/28/color-differences-algorithm/\n     * http://www.emanueleferonato.com/2009/09/08/color-difference-algorithm-part-2/\n     * @method rgb_to_xyz\n     * @param  {[type]}   red   [description]\n     * @param  {[type]}   green [description]\n     * @param  {[type]}   blue  [description]\n     * @return {[type]}\n     */\n    rgb_to_xyz(r, g, b){\n        var _red = r/255,\n           _green = g/255,\n           _blue = b/255,\n           x,y,z;\n\n        if(_red>0.04045){\n             _red = (_red+0.055)/1.055;\n             _red = Math.pow(_red,2.4);\n        }\n        else{\n             _red = _red/12.92;\n        }\n        if(_green>0.04045){\n             _green = (_green+0.055)/1.055;\n             _green = Math.pow(_green,2.4);     \n        }\n        else{\n             _green = _green/12.92;\n        }\n        if(_blue>0.04045){\n             _blue = (_blue+0.055)/1.055;\n             _blue = Math.pow(_blue,2.4);     \n        }\n        else{\n             _blue = _blue/12.92;\n        }\n        _red *= 100;\n        _green *= 100;\n        _blue *= 100;\n        x = _red * 0.4124 + _green * 0.3576 + _blue * 0.1805;\n        y = _red * 0.2126 + _green * 0.7152 + _blue * 0.0722;\n        z = _red * 0.0193 + _green * 0.1192 + _blue * 0.9505;\n        return [x,y,z];\n    }\n\n    xyz_to_lab(x, y, z){\n        var _x = x/95.047,\n            _y = y/100,\n            _z = z/108.883,\n            l, a, b;\n        \n        if(_x>0.008856){\n             _x = Math.pow(_x,1/3);\n        }\n        else{\n             _x = 7.787*_x + 16/116;\n        }\n        if(_y>0.008856){\n             _y = Math.pow(_y,1/3);\n        }\n        else{\n             _y = (7.787*_y) + (16/116);\n        }\n        if(_z>0.008856){\n             _z = Math.pow(_z,1/3);\n        }\n        else{\n             _z = 7.787*_z + 16/116;\n        }\n        l= 116*_y -16;\n        a= 500*(_x-_y);\n        b= 200*(_y-_z);\n        return [l, a, b];\n    }\n\n    de_1994( lab1, lab2){\n        var c1 = Math.sqrt(lab1[1]*lab1[1]+lab1[2]*lab1[2]),\n            c2 = Math.sqrt(lab2[1]*lab2[1]+lab2[2]*lab2[2]),\n            dc = c1-c2,\n            dl = lab1[0]-lab2[0],\n            da = lab1[1]-lab2[1],\n            db = lab1[2]-lab2[2],\n            dh = Math.sqrt((da*da)+(db*db)-(dc*dc)),\n            first = dl,\n            second = dc/(1+0.045*c1),\n            third = dh/(1+0.015*c1);\n        return Math.sqrt(first*first+second*second+third*third);\n    }\n\n    toString() {\n        return this.css();\n    }\n\n    isLight(divider = 200){\n        return (this.brightness >= divider);\n    };\n\n    isDark(divider = 50){\n        return (this.brightness <= divider);\n    };\n\n    isSkinTone(brown = [139,69,19]){\n        if (this.saturation < 60 && \n            this.mostlyRed() && \n            this.distance(brown) < 35\n        ){\n            return true;\n        }\n        return false;\n    }\n\n    isRed(variance){\n        var colorMap = this.getColorMap(),\n            ret = true;\n\n        ret = (this.hue <= colorMap.red.maxHue || this.hue > colorMap.pink.maxHue );\n        delete(colorMap.red.maxHue);\n        return ret && this._matchesCriterion(colorMap.red);\n    }\n\n\n    isGray(variance = 30){\n        var colorMap = this.getColorMap(),\n            ret = true;\n\n        ret = (\n            ( Math.abs(this.red - this.blue) < variance) &&\n            ( Math.abs(this.red - this.green) < variance) &&\n            ( Math.abs(this.blue - this.green) < variance)\n        );\n        return ret && this._matchesCriterion(colorMap.gray);\n    }\n\n\n    getColorMap(){\n        return {\n\n            red: {\n                reference: [255,0,0],\n                maxHue: 10,\n                // minBrightness: 30,\n                minSaturation: 10\n            },\n            brown: {\n                reference: [112, 42, 11],\n                minHue: 5,\n                maxHue: 50,\n                // maxSaturation: 84,\n                // minBrightness: 18\n            },\n            orange: {\n                reference: [253, 82, 13],\n                minHue: 10,\n                maxHue: 39,\n                minSaturation: 71,\n                minBrightness: 40\n            },\n            yellow: {\n                reference: [255,255,0],\n                minHue: 40,\n                maxHue: 68,\n                // minSaturation: 50,\n                // minBrightness: 45\n            },\n            green: {\n                reference: [0,255,0],\n                minHue: 58.5,\n                maxHue: 170,\n                // minSaturation: 10,\n                minBrightness: 7\n            },\n            blue: {\n                reference: [0,0,255],\n                minHue: 167,\n                maxHue: 250\n            },\n            indigo: {\n                reference: [0,0,255],\n                minHue: 220,\n                maxHue: 250,\n                minSaturation: 60,\n                maxBrightness: 35\n            },\n            violet: {\n                reference: [164, 100, 223],\n                minHue: 220,\n                maxHue: 323,\n                minSaturation: 13,\n                // minBrightness: 10\n            },\n            \n            pink: {\n                reference: [250,50,150],\n                minHue: 295,\n                maxHue: 334,\n                // minSaturation: 80\n            },\n            white: {\n                reference: [255,255,255],\n                maxSaturation: 5,\n                minBrightness: 95\n            },\n            black: {\n                reference: [0,0,0],\n                maxSaturation: 5,\n                maxBrightness: 5\n            },\n            gray: {\n                reference: [204,204,204],\n                minBrightness: 10,\n                maxBrightness: 98\n            }\n        };\n    }\n    is(compare){\n        var colorMap = this.getColorMap();\n        if(compare === 'gray'){\n            return this.isGray();\n        }\n        if(compare === 'red'){\n            return this.isRed();\n        }\n        if(colorMap[compare]){\n            var criterion = colorMap[compare];\n            return this._matchesCriterion(criterion);\n        }\n        // TODO: make this work\n        // else if (typeof compare === 'Color'){\n        //     return this.distance(compare) < variance;   \n        // }\n        return false;\n    }\n\n    _matchesCriterion(criterion){\n        var ret = true;\n\n        if(criterion.minHue){\n            ret = ret && this.hue >= criterion.minHue;\n        }\n        if(criterion.maxHue){\n            ret = ret && this.hue <= criterion.maxHue;\n        }\n        if(criterion.maxValue){\n            ret = ret && this.value < criterion.maxValue;\n        }\n        if(criterion.minValue){\n            ret = ret && this.value >= criterion.minValue;\n        }\n        if(criterion.maxBrightness){\n            ret = ret && this.brightness <= criterion.maxBrightness;\n        }\n        if(criterion.minBrightness){\n            ret = ret && this.brightness >= criterion.minBrightness;\n        }\n        if(criterion.maxSaturation){\n            ret = ret && this.saturation <= criterion.maxSaturation;\n        }\n        if(criterion.minSaturation){\n            ret = ret && this.saturation >= criterion.minSaturation;\n        }\n        return ret;\n    }\n\n    //Reference: http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n    initializeHSLV(){\n        var r = this.red / 255, \n            g = this.green / 255, \n            b = this.blue /255;\n        \n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2;\n        var v = max;\n\n        if(max == min){\n            h = s = 0; // achromatic\n        }else{\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch(max){\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n            }\n            h /= 6;\n            h *= 3.6;\n        }\n        this._hue        = parseFloat( (h * 100).toFixed(2) );\n        this._saturation = parseFloat( (s * 100).toFixed(2) );\n        this._lightness  = parseFloat( (l * 100).toFixed(2) );\n        this._brightness = parseFloat( ((this.red*299)+(this.green*587)+(this.blue*114))/1000 );\n        this._value      = parseFloat( v );\n    }\n\n    toJSON(){\n        return { red: this.red,  green:this.green, blue: this.blue,};\n    }\n    toArray(){\n        return [this.red,this.green,this.blue];\n    }\n    toString(){\n        return '[' + [this.red,this.green,this.blue].join(', ') + ']';\n    }\n};\nmodule.exports = Color;\nwindow.Color = Color;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/color.js\n **/"],"sourceRoot":""}